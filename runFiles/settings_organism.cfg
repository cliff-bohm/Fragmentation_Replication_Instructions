% BRAIN
  brainType = Markov                         #(string) brain to be used, [Markov, RNN]

% BRAIN_MARKOV
  evaluationsPreUpdate = 1                   #(int) number of times brain will be evaluated (i.e. have all gates run and hidden cycled) per call to brain update
  genomeNameSpace = root::                   #(string) namespace used to set parameters for genome used to encode this brain
  hiddenNodes = 8                            #(int) number of hidden nodes
  hiddenThreshold = 0.5                      #(double) if useHiddenThreshold is true, this value will be used to compare divided hidden
  hiddenThresholdSwitch = 0                  #(bool) if true, each brain hidden will be divided by the number of connections to that hidden and compared to hiddenThreshold
                                             #  (if < hiddenThreshold then 0, else 1)
  outputThreshold = 0.5                      #(double) if useOutputThreshold is true, this value will be used to compare divided outputs
  outputThresholdSwitch = 0                  #(bool) if true, each brain output will be divided by the number of connections to that output and compared to outputThreshold
                                             #  (if < outputThreshold then 0, else 1)
  recurrentOutput = 0                        #(bool) if true, outputs will be copied like hidden at the end of each brain updata (or evaluation, if evaluationsPerBrainUpdate
                                             #  > 1) giving the brain access to it's prior outputs
  useGateRegulation = 0                      #(bool) if true, for each gate a pair of values will be read, the first will determinif the gate is always off, always
                                             #  on, or regulated. If regulated, the secondvalue will determin the node address to use for regulation.

% BRAIN_MARKOV_ADVANCED
  bitsPerBrainAddress = 8                    #(int) how many bits are evaluated to determine the brain addresses
  bitsPerCodon = 8                           #(int) how many bits are evaluated to determine the codon addresses
  randomizeUnconnectedOutputs = 0            #(bool) output nodes with no connections will be set randomly (default : false, behavior set to 0)
  randomizeUnconnectedOutputsMax = 1.0       #(double) random values resulting from randomizeUnconnectedOutput will be in the range of randomizeUnconnectedOutputsMin
                                             #  to randomizeUnconnectedOutputsMax
  randomizeUnconnectedOutputsMin = 0.0       #(double) random values resulting from randomizeUnconnectedOutput will be in the range of randomizeUnconnectedOutputsMin
                                             #  to randomizeUnconnectedOutputsMax
  randomizeUnconnectedOutputsType = 0        #(int) determines type of values resulting from randomizeUnconnectedOutput 0 = int, 1 = double
  recordIOMap = 0                            #(bool) if true, all inoput output and hidden nodes will be recorderd on every brain update
  recordIOMap_fileName = markov_IO_map.csv   #(string) Name of file where IO mappings are saved

% BRAIN_MARKOV_GATES_ANN
  Input_Range = 1-4                          #(string) range of number of inputs (min inputs-max inputs)
  activationFunction = tanh                  #(string) choose from linear(i.e. none),tanh,tanh(0-1),bit,triangle
  allow = 0                                  #(bool) set to true to enable ANN gates
  biasRange = -1.0,1.0                       #(string) bias will be generated per node in this range and used to initalize gate on update
  bitBehavior = 0                            #(bool) if true, preform BIT operator on all inputs and output to and from this gate
  discretizeOutput = 0                       #(int) should recurrent nodes be discretized when being copied?
                                             #  if 0, no, leave them be.
                                             #  if 1 then map <= 0 to 0, and > 0 to 1
                                             #  if > then 1, values are mapped to new equally spaced values in range [-1..1] such that each bin has the same sized
                                             #  range
                                             #      i.e. if 3 bin bounderies will be (-1.0,-.333-,.333-,1.0) and resulting values will be (-1.0,0.0,1.0)
                                             #  Note that this process ends up in a skewed mapping. mappings will always include -1.0 and 1.0. even values > 1 will
                                             #  result in remappings that do not have 0
  initialCount = 6                           #(int) seed genome with this many start codons
  weightRangeMapping = 0,1,0,1,0             #(string) comma seperated list of exactly five (double) values. weight values from genome will be extracted in the
                                             #  range [0..sum(list)].
                                             #  values between 0 and the first value will map to -1
                                             #  values between the first value and first+second will map to [-1..0]
                                             #  ... i.e. each value in the list is the ratio of possible values that will map to each value/range in [-1,[-1..0],0,[0..1],1]
                                             #  the result is that this list sets the ratio of each type of weight (-1,variable(-1..0),0,variable(0..1),1)

% BRAIN_MARKOV_GATES_COMPARATOR
  allow = 0                                  #(bool) set to true to enable camparator gates
  allowedComparisons = 111                   #(int) a three digit binary, first allows < comparison, second =, and third > (i.e. 010 or '10' allows only equals)
  comparatorMode = 0                         #(int) if 0, let genome decide; if 1 only allow programable; if 2, only allow direct comparison
  initalValue = G                            #(string) comparison value when gate is reset, G = extract from genome
  initalValueRange = -100,100                #(string) min and max int values for inital value if initalValue == G
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_DECOMPOSABLE
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposible gates
  initialCount = 3                           #(int) seed genome with this many start codons
  rowFirst = 1                               #(bool) set to true to make second-order decomposable gates operate in row-first expansion
  use2Level = 0                              #(bool) set to true to allow "super decomposable" gates

% BRAIN_MARKOV_GATES_DECOMPOSABLE_DIRECT
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposible gates (direct factors version)
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_DECOMPOSABLE_FEEDBACK
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposable feedback gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_DETERMINISTIC
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 1                                  #(bool) set to true to enable deterministic gates?
  initialCount = 6                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_EPSILON
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable epsilon gates
  epsilonSource = 0.05                       #(double) chance output will be randomized. if > 1 or < 0, epsilon value is determined by the genome. If positive,
                                             #  then the genome handler will advance int(value) number of sites - 1 from the current location, before reading. If
                                             #  the value is negative, then int(abs(value)) indicates the absolute index of the site to be used i.e.(site at abs(value)
                                             #  in genome)
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_FEEDBACK
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable feedback gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_GENETICPROGRAMING
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable GP (what?) gates
  constValueMax = 1.0                        #(double) for the const values, max value the genome can generate
  constValueMin = -1.0                       #(double) for the const values, min value the genome can generate
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_IZHIKEVICH
  A = .02:.1                                 #(string) value for a, if single value, use this value, if X:Y use genome to pick value in range
  B = .2:3                                   #(string) value for b, if single value, use this value, if X:Y use genome to pick value in range
  C = -75:-45                                #(string) value for c, if single value, use this value, if X:Y use genome to pick value in range
  D = 0:10                                   #(string) value for d, if single value, use this value, if X:Y use genome to pick value in range
  UInital = -15                              #(string) initalValue for U, if single value, use this value, if X:Y use genome to pick value in range (-15)
  V2_scale = .04                             #(string) value for V2_scale, if single value, use this value, if X:Y use genome to pick value in range (.04)
  VInital = -75:-45                          #(string) initalValue for V, if single value, use this value, if X:Y use genome to pick value in range
  V_const = 140                              #(string) value for V_const, if single value, use this value, if X:Y use genome to pick value in range (140)
  V_scale = 5                                #(string) value for V_scale, if single value, use this value, if X:Y use genome to pick value in range (5)
  allow = 0                                  #(bool) set to true to enable Izhikevich gates
  initialCount = 20                          #(int) seed genome with this many start codons
  inputCount = 1:4                           #(string) value for number of inputs, if single value, use this value, if X:Y use genome to pick value in range
  inputWeightsRange = -20:20                 #(string) value for weights on input values, if single value, use this value, if X:Y use genome to pick value in range
  record_behavior = 0                        #(bool) if true, record IzhikevichGate gate behavior (NOTE: this can generate a lot of data!)
  record_behavior_fileName = izhikevichGate_behavior.csv #(string) Name of file where neron behaviors are saved
  threshold = 30.0                           #(string) value for threshold, if single value, use this value, if X:Y use genome to pick value in range (30)

% BRAIN_MARKOV_GATES_NEURON
  allow = 0                                  #(bool) set to true to enable Neuron gates
  allowRepression = 1                        #(bool) if false, neuronGates only fire if charge exceeds threshold; if true, neuronGates can also exist which always
                                             #  fire, except when charge exceeds threshold
  decayRateMax = 1.0                         #(double) max % current charge will decay each time gate update is called (towards 0) per update
  decayRateMin = 0.0                         #(double) min % current charge will decay each time gate update is called (towards 0) per update
  deliveryChargeFromNode = -1                #(int) if 0, genome will determine deliveryCharge value within deliveryCharge range
                                             #  if 1, gate will have additional input, determined by genome, which will be clamped to deliveryCharge range and used
                                             #  as deliveryCharge value, if -1, genome will decide between options 0 and 1
  deliveryChargeMax = 2.0                    #(double) output charge
  deliveryChargeMin = -2.0                   #(double) output charge
  deliveryError = 0.0                        #(double) error in deliveryCharge... charge -= random[0,deliveryError)
  dischargeBehavior = -1                     #(int) what happens when gate fires (-1: let genome decide, 0: clear charge, 1: 'reduce' by delivery charge, 2: 1/2
                                             #  charge)
  initialCount = 20                          #(int) seed genome with this many start codons (neurons tend to work better in larger numbers)
  numInputsMax = 4                           #(int) max number of inputs to neuronGate
  numInputsMin = 1                           #(int) min number of inputs to neuronGate
  record_behavior = 0                        #(bool) if true, record neuron behavior (NOTE: this can generate a lot of data!)
  record_behavior_fileName = neuron_behavior.csv #(string) Name of file where neron behaviors are saved
  thresholdFromNode = -1                     #(int) if 0, genome will determine threshold value within threshold range
                                             #  if 1, gate will have additional input, determined by genome, which will be clamped to threshold range and used as
                                             #  threshold value, if -1, genome will decide between options 0 and 1
  thresholdMax = 2.0                         #(double) highest possible value for threshold
  thresholdMin = -2.0                        #(double) lowest possible value for threshold

% BRAIN_MARKOV_GATES_PASSTHROUGH
  allow = 0                                  #(bool) set to true to enable passthrough gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_PROBABILISTIC
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable probabilistic gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_TRIT
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable tritDeterministic gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_VOID
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable void gates
  epsilonSource = 0.05                       #(double) [0,1], chance that output will be randomized
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_RNN
  activationFunction = tanh                  #(string) choose from "linear"(or "none"),"tanh","tanh(0-1)","bit","triangle","invtriangle","sin",
                                             #  or, "genome" to allow evolution to pick
  biasRange = -1.0,1.0                       #(string) bias will be generated per node in this range and used to initalize gate on update
  discretizeRecurrent = 0                    #(int) should recurrent nodes be discretized when being copied?
                                             #  if 0, no, leave them be.
                                             #  if 1 then map <= 0 to 0, and > 0 to 1
                                             #  if > then 1, values are mapped to new equally spaced values in range [-1..1] such that each bin has the same sized
                                             #  range
                                             #      i.e. if 3 bin bounderies will be (-1.0,-.333-,.333-,1.0) and resulting values will be (-1.0,0.0,1.0)
                                             #  Note that this process ends up in a skewed mapping. mappings will always include -1.0 and 1.0. even values > 1 will
                                             #  result in remappings that do not have 0
  hiddenLayerSizes = 0                       #(string) comma seperated list of hidden layer sizes (0 indicates no hidden layer)
  nrOfRecurringNodes = 8                     #(int) number of recurring nodes
  weightRangeMapping = 0,1,0,1,0             #(string) comma seperated list of exactly five (double) values. weight values from genome will be extracted in the
                                             #  range [0..sum(list)].
                                             #  values between 0 and the first value will map to -1
                                             #  values between the first value and first+second will map to [-1..0]
                                             #  ... i.e. each value in the list is the ratio of possible values that will map to each value/range in [-1,[-1..0],0,[0..1],1]
                                             #  the result is that this list sets the ratio of each type of weight (-1,variable(-1..0),0,variable(0..1),1)

% BRAIN_RNN_NAMES
  genomeName = root::                        #(string) namespace of genome used to encode this brain

% GENOME
  alphabetSize = 256.0                       #(double) alphabet size for genome
  genomeType = Circular                      #(string) genome to be used, [Circular]
  sitesType = char                           #(string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationIndelCopyFirst = 1                 #(bool) whether copy or deletion happens first (0 = delete first, 1 = copy first)
  mutationIndelInsertMethod = 0              #(int) where is copied material inserted?
                                             #  0 = place random, 1 = replace deleted sites, 2 = insert just before copied material
  mutationIndelMaxSize = 512                 #(int) maximum size of insertion-deletion mutation
  mutationIndelMinSize = 128                 #(int) minimum size of insertion-deletion mutation
  mutationIndelRate = 0.0                    #(double) per site insertion+deletion (indel) rate. This mutation copies a segment of the genome and deletes a segment
                                             #  of the same size so genome size remains fixed).
  mutationPointOffsetRange = 1.0             #(double) range of PointOffset mutation
  mutationPointOffsetRate = 0.0              #(double) per site point offset mutation rate (site changes in range (+/-)mutationPointOffsetRange)
  mutationPointOffsetUniform = 1             #(bool) if true, offset will be from a uniform distribution, if false, from a normal distribution (where mean is 0
                                             #  and std_dev is mutationPointOffsetRange)
  mutationPointRate = 0.005                  #(double) per site point mutation rate
  sizeInitial = 5000                         #(int) starting size for genome
  sizeMax = 20000                            #(int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             #(int) if genome is smaller then this, mutations will only increase chromosome size

